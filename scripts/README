********************************
* CPROVER Benchmarking Toolkit *
********************************

The benchmarking toolkit consists of three main components:

- Benchmark archive management tools
- Benchmark execution helpers
- Result evaluation


Benchmark Execution Example
===========================

$ wget http://www.cprover.org/benchmarks/linux-2.6.19-ddverify.cprover-bm.tar.gz
$ unpack.sh \
  http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.19.tar.bz2 \
  linux-2.6.19-ddverify.cprover-bm.tar.gz
$ cd linux-2.6.19-ddverify
$ cprover/rules verify
$ make_table.pl cprover/verified.satabs
$ make_graph.pl cprover/verified.satabs | gnuplot


Benchmark Archive Management
============================

Benchmarks consist of two files: (1) an original source archive as obtained from
its original authors, without modification and (2) a corresponding
<NAME>.cprover-bm.tar.gz file that contains all modifications, execution scripts,
and other helpers. This design is inspired by Debian v3 source packages and may
thus sound familiar to people who are used to working with Debian packages. 

(1) The original source archive must be a .zip, .tar.gz, .tgz, or .tar.bz2
    archive. If the authors of the software to be benchmarked do not offer such
    an archive it should be built manually from whatever the authors provide as
    source.

(2) The <NAME>.cprover-bm.tar.gz is created and managed by update.sh as described
    below. The file ships a cprover/ directory that may contain arbitrary files,
    but at least a Makefile cprover/rules must be provided. The archive
    management scripts will populate a cprover/patches directory that precisely
    describes all modification to original sources.

The basic design of this archive solution is completely independent of the
software to be benchmarked. Its main purpose is the precise description of
changes to the original source that were made in order to benchmark some tool.

Archive management scripts
--------------------------

- unpack.sh: Takes an archive of original source (or a URL to download the
  archive from) and the corresponding benchmarking archive
  <NAME>.cprover-bm.tar.gz. unpack.sh then builds the directory <NAME> from the
  contents of the original source archive, unpacks the cprover directory in
  <NAME>, and applies patches from cprover/patches, if any.
  
- update.sh: Creates and maintains a <NAME>.cprover-bm.tar.gz file. This file is
  initially created in the parent directory by running update.sh --init <SOURCE
  ARCHIVE> from within directory <NAME> resulting from manually unpacking
  <SOURCE ARCHIVE>. This init step creates the cprover/ directory and populates
  it with a template cprover/rules file. Once the <NAME>.cprover-bm.tar.gz file
  has been created for the first time, it will only be updated by update.sh. To
  this end, update.sh <SOURCE ARCHIVE> unpacks the source archive into a
  temporary directory, applies patches previously recorded in cprover/patches,
  and computes the diff between the current directory and the contents of the
  patched source archive. If new changes are found, these are recorded as new
  patches in cprover/patches. The sequence of patches to be applied is stored in
  cprover/patches series. It is recommended that automatically created patches
  are renamed to more descriptive names. Consequently  such renamings must be
  reflected in cprover/patches/series.

Usage Example
-------------

- Creating a new benchmark suite, e.g., for the Linux kernel:

  Download the original sources from kernel.org:
  $ wget http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.19.tar.bz2

  Manually unpack them:
  $ tar xjf linux-2.6.19.tar.bz2

  We rename the directory to get proper benchmark name "linux-2.6.19-foo"
  $ mv linux-2.6.19 linux-2.6.19-foo
  $ cd linux-2.6.19-foo

  Create the basic benchmarking archive linux-2.6.19-foo.cprover-bm.tar.gz
  $ update.sh --init ../linux-2.6.19.tar.bz2

  Edit some source files ... and record patches
  $ update.sh ../linux-2.6.19.tar.bz2

  To make the benchmark source and all patches available for others to use
  publish linux-2.6.19-foo.cprover-bm.tar.gz and the original source archive or
  its URL.

- Using the benchmark suite:

  $ unpack.sh http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.19.tar.bz2 \
    linux-2.6.19-foo.cprover-bm.tar.gz
  $ cd linux-2.6.19-foo


Benchmark Execution
===================

- template cprover/rules file must be adapted to list the benchmarks (text XXX)
  and suitable build rules, meant for CPROVER tools
- to execute, run cprover/rules verify (which triggers a build), may use
  cprover/rules -j4 verify for parallel exuection (standard make) or
  cprover/rules verify CONFIG=<other config>
- verify.sh: expects support of --version
- list_claims.sh
- cil_wrapper.sh

sources and the verification tool that you intend to apply. Well, ok, the
template cprover/rules is made for CPROVER tools, but then its just an
example... The cprover/rules file, was is, will expect all of the scripts to be
in your $PATH.

- verify.sh: The wrapper script that generates log files. As we discussed, the
  --TOOLX thingy will be removed in future versions in favour of a TOOL
  environment variable for added flexibility.
- list_claims.sh: Mostly useless for you, it just extracts the claims that the
  CPROVER tools could then verify using verify.sh, I'm just attaching it for the
  sake of completeness.

For reading the log files and generating nice diagrams & tables we have
make_graph.pl and make_table.pl, plus parse_results.pl, which is used by both of
these scripts. This will be completely rewritten as soon as I get around to do
it, which will not happen before next week. 


