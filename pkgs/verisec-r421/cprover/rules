#!/usr/bin/make -f

BENCHMARKS = $(basename $(shell find . -name "*.test_desc"))

TIMEOUT = 60
MAXMEM = 3500
CONFIG = loopfrog.dfl
# CONFIG = loopfrog.no-inv
# CONFIG = cbmc.u5-nua

TOOL_OPTS = --bounds-check --32
cprover/verified.cbmc.u5-nua: TOOL_OPTS += --unwind 5 --no-unwinding-assertions
cprover/verified.loopfrog.no-inv: TOOL_OPTS += --no-invariants
cprover/verified.satabs: TOOL_OPTS += --iterations 20
cprover/verified.scratch.bf: TOOL_OPTS += --bug-finding
cprover/verified.wolverine.u5: TOOL_OPTS += --unwind 5


# building the source code
COMPILER = goto-cc --32
SUFFIX = bin

build::
	test -d cprover
	$(MAKE) -f cprover/rules cprover/binaries

cprover/binaries: $(addsuffix .$(SUFFIX), $(addprefix build/, $(BENCHMARKS)))
	rm -f $@
	for f in $^ ; do \
	  echo $$f >> $@ ; \
	done

build/%.$(SUFFIX): %.test_desc
	mkdir -p $(dir $@)
	cd $(dir $<) ; $(COMPILER) -o $(abspath $@) `sed -n '3{p;q}' $(realpath $<)` `sed -n '1{p;q}' $(realpath $<)`


# verification rules
verify:: build
	test -d cprover
	$(MAKE) -f cprover/rules cprover/verified.$(CONFIG)

cprover/verified.$(CONFIG): TOOL ?= $(basename $(CONFIG))

cprover/verified.$(CONFIG): $(addsuffix .vr, $(addprefix results.$(CONFIG)/, $(BENCHMARKS)))
	cat $^ > $@

results.$(CONFIG)/%vr: build/%$(SUFFIX)
	mkdir -p $(dir $@)
	set -e ; cd $(dir $@) ; \
	if [ "$(TOOL)" = "loopfrog" ] ; then \
		claims="`sed -n '2{p;q}' $(realpath $*test_desc) | perl -p -e 's/^.*--testclaim\s+(\S+)(\s+.*)?$$/$$1/g'`:UNKNOWN" ; \
	else \
		claims=`list_claims.sh --$(TOOL) $(realpath $<) -- $(TOOL_OPTS)` ; \
	fi ; \
	for c in $$claims ; do \
		cl=`echo $$c | cut -f1 -d:` ; \
		st="`grep '^PASS:' $(realpath $*test_desc) | sed 's/[[:space:]]*$$//'`" ; \
		if [ "$$st" = "PASS: 0 FAIL: 1" ] ; then st="--invalid" ; \
		elif [ "$$st" = "PASS: 1 FAIL: 0" ] ; then st="--valid" ; \
		else echo "Found unexpected status $$st" 1>&2 ; exit 1 ; fi ; \
		verify.sh --claim $$cl $$st --timeout $(TIMEOUT) --maxmem $(MAXMEM) --$(TOOL) $(realpath  $<) -- $(TOOL_OPTS) ; \
	done | tee $(abspath $@) ; \
	exit $${PIPESTATUS[0]}


# cleanup
clean::
	test -d cprover
	rm -rf results.* build
	rm -f cprover/binaries cprover/verified.*

